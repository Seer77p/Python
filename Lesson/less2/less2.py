# # pip freeze > requiremennts.txt создает файл txt

# # Списки
# list_1 = []  # Создание пустого списка
# list_2 = list()  # Создание пустого списка
# list_1 = [7, 9, 11, 13, 15, 17] # Создание заполненного списка

# list_1 = [7, 9, 11, 13, 15, 17] # Нумерация списка list_1[0] 7 это нулевой элемент
# print(list_1[0])  # 7

# list_1 = [7, 9, 11, 13, 15, 17]
# print(len(list_1))  # 6 len используется что бы узнать длину списка

# list_11 = list()  # создание пустого списка
# for i in range(5):  # цикл выполнится 5 раз
#     n = int(input('Введите число: '))  # пользователь вводит целое число
# list_11.append(n)  # сохранение введенного элемента в конец списка
# # 1-я итерация цикла(повторение 1): n = 12, list_1 = [12]
# # 2-я итерация цикла(повторение 2): n = 7, list_1 = [12, 7]
# # 3-я итерация цикла(повторение 3): n = -1, list_1 = [12, 7, -1]
# # 4-я итерация цикла(повторение 4): n = 21, list_1 = [12, 7, -1, 21]
# # 5-я итерация цикла(повторение 5): n = 0, list_1 = [12, 7, -1, 21, 0]
# print(list_11)  # [12, 7, -1, 21, 0]

# # Взаимодействие цикла for со списком:
# list_21 = [12, 7, -1, 21, 0]
# for i in list_21:
#     print(i)  # вывод каждого элемента списка
# # 1-я итерация цикла(повторение 1): i = 12
# # 2-я итерация цикла(повторение 2): i = 7
# # 3-я итерация цикла(повторение 3): i = -1
# # 4-я итерация цикла(повторение 4): i = 21
# # 5-я итерация цикла(повторение 5): i = 0
# list_31 = [12, 7, -1, 21, 0]
# for i in range(len(list_31)):
#     print(list_31[i])  # вывод каждого элемента списка
# # 1-я итерация цикла(повторение 1): list_1[0] = 12
# # 2-я итерация цикла(повторение 2): list_1[1] = 7
# # 3-я итерация цикла(повторение 3): list_1[2] = -1
# # 4-я итерация цикла(повторение 4): list_1[3] = 21
# # 5-я итерация цикла(повторение 5): list_1[4] = 0

# # Основные действия со списками:
# # 1. Удаление последнего элемента списка.
# # Метод pop удаляет последний элемент из списка:
# list_41 = [12, 7, -1, 21, 0]
# print(list_41.pop())  # 0
# print(list_41)  # [12, 7, -1, 21]
# print(list_41.pop())  # 21
# print(list_41)  # [12, 7, -1]
# print(list_41.pop())  # -1
# print(list_41)  # [12, 7]
# # Удаление конкретного элемента из списка.
# # Надо указать значение индекса в качестве аргумента функции pop:
# list_51 = [12, 7, -1, 21, 0]
# print(list_51.pop(0))  # 12
# print(list_51)  # [7, -1, 21, 0]

# # Добавление элемента на нужную позицию.
# # Функция insert — указание индекса(позиции) и значения.
# list_61 = [12, 7, -1, 21, 0]
# print(list_61.insert(2, 11))
# print(list_61)  # [12, 7, 11, -1, 21, 0]

# # Срез списка
# # Помните в конце первой лекции Вы прошли срезы строк? Также существует срез
# # списка, давайте научимся изменять наш список
# # ● Отрицательное число в индексе — счёт с конца списка
# list_71 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_71[0])  # 1
# print(list_71[1])  # 2
# print(list_71[len(list_71)-1])  # 10
# print(list_71[-5])  # 6
# print(list_71[:])  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_71[:2])  # [1, 2]
# print(list_71[len(list_71)-2:])  # [9, 10]
# print(list_71[2:9])  # [3, 4, 5, 6, 7, 8, 9]
# print(list_71[6:-18])  # []
# print(list_71[0:len(list_71):6])  # [1, 7]
# print(list_71[::6])  # [1, 7]


# # Кортежи
# # Кортеж — это неизменяемый список.
# t = ()                                 # создание пустого кортежа
# print(type(t))                         # class <'tuple'>
# t = (1,)                               # для того, что бы был кортеж выражение в скобках заказнчивается запятой ,
# print(type(t))                         # class <'tuple'>
# t = (1)
# print(type(t))                         #< class 'int' >
# t = [28, 9, 1990]                      # Список
# t=tuple(t)                             # преобразование в класс tuple
# print(type(t))                         # class <'tuple'>

# colors = ['red', 'green', 'blue']
# print(colors)                          # ['red', 'green', 'blue']
# t = tuple(colors)
# print(t)                               # ('red', 'green', 'blue')
# t = tuple(['red', 'green', 'blue'])
# print(t[0])                             # red
# print(t[2])                             # blue
# for e in t:
#     print(e)                            # red green blue
# #t[0] = 'black'  # TypeError: 'tuple' object does not support(нельзя изменять кортеж)

# # Можно распаковать кортеж в независимые переменные:
# t1 = tuple(['red', 'green', 'blue'])
# red, green, blue = t1
# print('r:{} g:{} b:{}'.format(red, green, blue))  # r:red g:green b:blue

# # Словари
# # Словари — неупорядоченные коллекции произвольных объектов с
# # доступом по ключу.
# # В списках в качестве ключа используется индекс элемента. В словаре для
# # определения элемента используется значение ключа(строка, число).
# dictionary = {}
# dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
# print(dictionary)  # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}
# print(dictionary['left'])  # ←
# # типы ключей могут отличаться
# print(dictionary['up'])  # ↑
# # типы ключей могут отличаться
# dictionary['left'] = '⇐'
# print(dictionary['left'])  # ⇐
# # print(dictionary['type'])  # KeyError: 'type'
# del dictionary['left']  # удаление элемента
# for item in dictionary:  # for (k,v) in dictionary.items():
#     print('{}: {}'.format(item, dictionary[item]))
# # up: ↑
# # down: ↓
# # right: →

# # Множества
# # Множества содержат в себе уникальные элементы, не обязательно
# # упорядоченные.
# # Одно множество может содержать значения любых типов. Если у Вас есть два
# # множества, Вы можете совершать над ними любые стандартные операции,
# # например, объединение, пересечение и разность. Давайте разберем их.
# colors = {'red', 'green', 'blue'}
# print(colors)  # {'red', 'green', 'blue'}
# colors.add('red') # так как red уже есть, не добавится
# print(colors)  # {'red', 'green', 'blue'}
# colors.add('gray')
# print(colors)  # {'red', 'green', 'blue','gray'}
# colors.remove('red') # удаление red
# print(colors)  # {'green', 'blue','gray'}
# #colors.remove('red')  # KeyError: 'red'
# colors.discard('red')  # Если red есть, то удаляет, если нет, то нет и ошибкии не будет
# print(colors)  # {'green', 'blue','gray'}
# colors.clear()  # { } удаление данных из множества
# print(colors)  # set()

# # Операции со множествами в Python
# a = {1, 2, 3, 5, 8} 
# b = {2, 5, 8, 13, 21}
# c = a.copy()  # копирование множества а в c = {1, 2, 3, 5, 8}
# u = a.union(b)  # объединение а множества и множества b  уникальными цифрами u = {1, 2, 3, 5, 8, 13, 21}
# i = a.intersection(b)  # найти пересечение в множестве а и множестве b выводятся одинаковые цифры i = {8, 2, 5}
# dl = a.difference(b)  #  множество а от множества b, цифры которые есть и в множестве а и в множестве b, 
#                       #  таким образом останутся dl = {1, 3}
# dr = b.difference(a)  # найти b от множества а, цифры которые есть и в множестве b и в множестве a, 
#                       # таким образом останутся dr = {13, 21}
# q = a.union(b).difference(a.intersection(b))  # в скобках(а от b = 8, 2, 5) а.union(b)=(1, 2, 3, 5, 8, 13, 21)
# # и от (1, 2, 3, 5, 8, 13, 21) differ (8, 2, 5) = ({1, 21, 3, 13}

# # Неизменяемое или замороженное множество(frozenset) — множество, с которым
# # не будут работать методы удаления и добавления.
# a = {1, 2, 3, 5, 8}
# b = frozenset(a)
# print(b)  # frozenset({1, 2, 3, 5, 8})

# Обобщение свойств встроенных коллекций в сводной таблице
# Тип коллекции        Изменяемость      Индексированность    уникальность   как создается

# Строка                    -                   +                   -             ''
# (string)                                                                        ""
# Список                    +                   +                   -             []
# (list)                                                                          list()
# Кортеж                    -                   +                   -             (),
# (tuple)                                                                         tuple()
# Словарь              + элементы                               + элементы          {}
# (dict)                - ключи                 -                 +ключи        {key:value,}
#                       + значения                              - значения         dict()
# Множество                 +                   -                   +           {elm1, elm2}
# (set)                                                                             set()
# Неизменное                -                   -                   +            frozenset()
# (множество)
# frozenset

#1. Простая ситуация — список:
#list_8 = [exp for item in iterable] пример задача ниже

# простая ситуация Задача: Создать список, состоящий из четных чисел в диапазоне от 1 до 100.
# Решение:
# 1. Создать список чисел от 1 до 100
# list_8 = []
# for i in range(1, 101):
#     list_8.append(i)
# print(list_8)  # [1, 2, 3,..., 100]
# #Эту же функцию можно записать так:
# list_8 = [i for i in range(1, 101)]  # [1, 2, 3,..., 100]
# print(list_8)


# # 2. Выборка по заданному условию:
# # list_9 = [exp for item in iterable(if conditional)]
# #2. Добавить условие(только чётные числа)
# list_9 = [i for i in range(1, 101) if i % 2 == 0]  # [2, 4, 6,..., 100]
# print(list_9)
# #Допустим, вы решили создать пары каждому из чисел(кортежи)
# list_9 = [(i, i) for i in range(1, 101) if i % 2 == 0]  # [(2, 2), (4, 4),...,(100, 100)]
# print(list_9)
# # Также можно умножать, делить, прибавлять, вычитать. Например, умножить
# # значение на 2.
# list_9 = [i * 2 for i in range(10) if i % 2 == 0]
# print(list_9)  # [0, 4, 8, 12, 16]


